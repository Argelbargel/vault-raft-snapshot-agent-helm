# -- overrides the generated full-name for generated resources 
# @default -- release-name + chart-name truncated to 63 chars
fullnameOverride:
# -- overrides the generated name for generated resources
# @default -- `.Chart.Name`
nameOverride: 

deployment:
  strategy:
    # -- Update-strategy for the agent's pods
    #    `Recreate` guarantees that no two snapshots get taken at the same time
    #    `RollingUpdate` ensures that there's always one instance of the agent running
    type: "Recreate"
  image:
    # -- Image that is deployed (change e.q. for private registry-proxy)
    repo: ghcr.io/argelbargel/vault-raft-snapshot-agent
    # -- (string) the image's tag
    # @default -- `.Chart.AppVersion`
    tag:
    # -- New releases of vault-raft-snapshot-agent always change the
    #    `.Chart.AppVersion` of this chart thus must only be changed
    #    if you use another repository than above
    pullPolicy: IfNotPresent
  # -- (int) see [kubernetes docs](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy)
  #    You might want to change this to a small value to avoid cluttering up the
  #    UI of a Continuous Delivery Tool like Argo-CD
  revisionHistoryLimit:

# -- Defines the contents of the configuration-file for vault-raft-snapshot-agent.
#    Except for `local_storage` the keys and values are the same as in the agents
#    [configuration file](https://github.com/Argelbargel/vault-raft-snapshot-agent)
config:
  # -- Url to the vault-API on the *leader* of your vault-cluster, e.g. `https?://vault-active.<vault-namespace>.svc.cluster.local:<vault-server service-port>`
  addr: http://127.0.0.1:8200
  vault_auth_method: k8s
  k8s_auth_path: kubernetes
  k8s_auth_role: vault-raft-snapshot-agent
  frequency: 1h
  retain: 72
  local_storage:
    # -- Enables/disables the local storage of snaphots.
    #    If disabled the corresponding volume and volume-mounts will not be created
    enabled: true
    # @ignored
    path: /vault/snapshots
    # -- Defines the kind of volume used to store the snapshots locally.
    #    If you specify `persistentVolumeClaim` the chart can generate the
    #    PVC for you. Just specify the claim as you would [normally do](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes)
    #    and add the property `create: true` and the relevant properties of your [PersistentVolumeClaimSpec]()
    #    as key of `persistentVolumeClaim`.
    volume:
      emptyDir: {}
